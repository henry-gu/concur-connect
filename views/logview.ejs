<!DOCTYPE html>
<html lang="en">

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/css/styles.css" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="Log Viewer" />
    <meta name="author" content="Henry Gu" />
    <title>Log Viewer</title>
</head>

<body>
<div class="container-logview">
        <div class="row">
            <div class="col-md-2">
                <!-- Buttons column -->
                <div class="btn-group-vertical w-100">
                    <button class="btn btn-primary btn-block mb-2" onclick="clearLogs()">Clear Logs</button>
                    <button class="btn btn-primary btn-block mb-2" onclick="refreshToken()" <%= refreshToken ? '' : 'disabled' %>>Refresh Token</button>
                    <button class="btn btn-primary btn-block mb-2" onclick="getCompanyInfo()" <%= accessToken ? '' : 'disabled' %>>Get Company Info</button>
                </div>
            </div>
            <div class="col-md-10">
                <!-- Logs heading and log-container wrapper -->
                <div class="logs-section">
                    <!-- Logs heading -->
                    <div class="col-auto text-secondary bg-white">
                        <h4>Logs</h4>
                    </div>
                    <!-- Log container -->
                    <div class="col-auto row bg-secondary bg-gradient bg-opacity-10 log-container-wrapper">
                        <pre><code class="log-container" id="logContainer" style="white-space: pre-wrap;"></code></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Function to fetch and update log content
        async function updateLog() {
            try {
                const response = await fetch('/fetchlogs');
                if (response.ok) {
                    const logData = await response.json();
                    const logContainer = document.getElementById('logContainer');

                    logContainer.innerHTML = ''; 

                    // Iterate through log messages and display each as a separate line
                    logData.forEach((logMessage) => {
                        const logLine = document.createElement('div');
                        logLine.classList.add('log-line');
                        logLine.textContent = logMessage;
                        logContainer.appendChild(logLine);
                    });

                    // Scroll to the bottom of the log container
                    logContainer.scrollTop = logContainer.scrollHeight;
                } else {
                    console.error('Failed to fetch log data.');
                }
            } catch (error) {
                console.error('Error fetching log data:', error);
            }
        }

        // Function to clear logs when "Clear Logs" button is clicked
        async function clearLogs() {
            try {
                const response = await fetch('/clearlogs', {
                    method: 'POST',
                });
                if (response.ok) {
                    console.log('Logs cleared successfully.');
                    // Clear the log container
                    const logContainer = document.getElementById('logContainer');
                    logContainer.innerHTML = '';
                } else {
                    console.error('Failed to clear logs.');
                }
            } catch (error) {
                console.error('Error clearing logs:', error);
            }
        }

        // Function to refresh the token when "Refresh Token" button is clicked
        async function refreshToken() {
            try {
                const response = await fetch('/refreshtoken', {
                    method: 'POST',
                });
                if (response.ok) {
                    console.log('Token refreshed successfully.');
                    // Implement logic to handle refreshed token, if needed
                } else {
                    console.error('Failed to refresh token.');
                }
            } catch (error) {
                console.error('Error refreshing token:', error);
            }
        }

        // Function to get company info when "Get Company Info" button is clicked
        async function getCompanyInfo() {
            try {
                const response = await fetch('/getcompanyinfo', {
                    method: 'POST',
                });
                if (response.ok) {
                    console.log('Company info retrieved successfully.');
                    // Implement logic to handle company info, if needed
                } else {
                    console.error('Failed to get company info.');
                }
            } catch (error) {
                console.error('Error getting company info:', error);
            }
        }

        // Initial log update
        updateLog();

        // Periodically refresh the log content every 6 seconds
        setInterval(updateLog, 6000);
    </script>
</body>

</html>
